{"version":3,"sources":["data/GBD_2017_death_rate_opioid_use_disorders_all_ages.csv","Header.js","NavItem.js","Nav.js","Tooltip.js","BarChart.js","Description.js","data/processData.js","App.js","index.js"],"names":["module","exports","Header","NavItem","activeButton","onButtonChange","buttonName","className","itemClass","onClick","e","Nav","Tooltip","selected","tipFormat","d3","years","Set","x","y","width","height","location","bothMean","femaleMean","maleMean","BarChart","chartData","useState","tooltip","setTooltip","barRef","useRef","useEffect","remove","chartGroup","current","append","attr","xScale","domain","d","bothUpper","clamp","nice","range","yScale","map","padding","call","ticks","style","text","selectAll","data","join","bandwidth","leftPadding","on","pageX","pageY","bothLower","drawBarChart","ref","viewBox","preserveAspectRatio","Description","yearRangeAll","href","sortByTotalDeaths","a","b","sortByLocation","formatChartData","rawData","dataByCountry","reduce","accum","curr","Object","values","countryArray","sex","mean","upper","lower","meanFloat","parseFloat","upperFloat","lowerFloat","maleUpper","maleLower","femaleUpper","femaleLower","year","App","setChartData","isError","setIsError","getData","csvFile","csv","formattedData","csvData","sort","sortedData","setSortedData","setActiveButton","sorted","sortData","currVal","yearsDeduped","extent","getYearRange","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b6de3386.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GBD_2017_death_rate_opioid_use_disorders_all_ages.122c5bb1.csv\";","import React from 'react';\n\nconst Header = () => {\n\n    return (\n        <header>\n            <h2>\n                Population Most Affected by Opioid Disorders\n            </h2>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './NavItem.css';\n\nconst NavItem = ({ activeButton, onButtonChange, buttonName }) => {\n\n    // Method to style the active button by adding a 'selected' class\n    // when the current button is the activeButton.\n    const itemClass = (buttonName) => \n    `nav-button ${activeButton === buttonName ? 'selected'  : ''}`\n    \n\n    return (\n        <button\n            className={itemClass(buttonName)}\n            onClick={ (e) => onButtonChange(buttonName)}>\n            {buttonName}\n        </button>\n    )\n    \n}\n\nexport default NavItem;","import React from 'react';\nimport NavItem from './NavItem';\nimport './Nav.css';\n\nconst Nav = ({ activeButton, onButtonChange }) => {\n    return (\n        <nav className=\"nav\">\n        \n            <NavItem\n                activeButton={activeButton}\n                onButtonChange={onButtonChange}\n                buttonName=\"View by number of deaths\"\n            />\n\n            <NavItem\n                activeButton={activeButton}\n                onButtonChange={onButtonChange}\n                buttonName=\"View by location\"\n            />\n        </nav>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport './Tooltip.css';\nimport * as d3 from 'd3';\n\n// I'm sure there is a better way to render the tooltips, but this is what\n// I could get working.\n// Attribution: https://swizec.com/blog/tooltips-and-state-across-various-d3-charts-in-a-react-dashboard/swizec/8904\n\nconst Tooltip = ({ selected }) => {\n\n    // Format tip to one decimal point.\n    const tipFormat = d3.format(\",.1f\");\n\n    // Dedupe years array and get min, max years.\n    const years = d3.extent([...new Set(selected.years)]);\n\n    return (\n        // I'm sure there is a better way to control the position of the tooltips...\n        <foreignObject x={selected.x - 40} y={selected.y - 200} width={125} height={100}>\n            <div className='tooltip'>\n                <h6>{selected.location}</h6>\n                <ul className=\"tip-data\">\n                    <li>Mean: {tipFormat(selected.bothMean)}</li>\n                    <li>Female: {tipFormat(selected.femaleMean)}</li>\n                    <li>Male: {tipFormat(selected.maleMean)}</li>\n                    <li>Years: {years[0]} - {years[1]}</li>\n                </ul>\n            </div>\n        </foreignObject>\n    )\n}\n\nexport default Tooltip;","import React, { useState, useRef, useEffect } from 'react';\nimport Tooltip from './Tooltip';\nimport './BarChart.css';\nimport * as d3 from 'd3';\n\nconst BarChart = ({ chartData }) => {\n\n    // Set state for tooltip\n    const [tooltip, setTooltip] = useState(null);\n\n    const width = 1000, height = 3500, leftPadding = 200, padding = 80;\n\n    // Get access to DOM for svg.g. Will create chart here.\n    const barRef = useRef();\n\n    // Need to investigate performance optimizers in React, because \n    // I think they could be of benefit here.\n    useEffect( () => {\n\n        const drawBarChart = (chartData) => {\n\n            // Access ref (svg.g) to place chart inside. \n            const barChart = d3.select(barRef.current);\n\n            const chartGroup = barChart.append('g')\n                .attr('transform', 'translate(0,0)')\n                .attr('id', 'chartGroup');\n\n            // Define xScale as linear for # of deaths.\n            const xScale = d3.scaleLinear()\n                .domain([0, d3.max(chartData, (d) => d.bothUpper)]).clamp(true).nice()\n                .range([leftPadding, width - padding]);\n                \n            // Define yScale as band scale on country name.\n            const yScale = d3.scaleBand()\n                .domain(chartData.map(d => d.location))\n                .range([padding, height - padding])\n                .padding(.05);\n    \n            // Append bottom x axis (# of deaths).\n            chartGroup.append('g')\n                .attr('transform', `translate(0, ${height - padding})`)\n                .attr('class', 'axis')\n                .call(\n                    d3.axisBottom(xScale)\n                        .ticks(25, \",f\")      \n                );\n    \n            // Append top x axis (# of deaths).\n            chartGroup.append('g')\n                .attr('transform', `translate(0, ${padding})`)\n                .attr('class', 'axis')\n                .call(\n                    d3.axisTop(xScale)\n                        .ticks(25, \",f\")\n                );\n    \n            // Append y axis\n            chartGroup.append('g')\n                .attr('transform', `translate(${leftPadding}, 0)`)\n                .attr('class', 'axis')\n                .call(d3.axisLeft(yScale));\n            \n            // Append top axis label.\n            chartGroup.append('text')\n                .attr('transform', `translate(${((width - leftPadding - padding)/2) + leftPadding}, ${padding/2})`)\n                .attr('class', 'x-labels')\n                .style('text-anchor', 'middle')\n                .text('Number of deaths per 100,000 people')\n    \n            // Append bottom axis label.\n            chartGroup.append('text')\n                .attr('transform', `translate(${((width - leftPadding - padding)/2) + leftPadding}, ${height - padding/2})`)\n                .attr('class', 'x-labels')\n                .style('text-anchor', 'middle')\n                .text('Number of deaths per 100,000 people')\n                \n            // Add bars/rects to chart. \n            chartGroup.append('g')\n                .selectAll('rect')\n                .data(chartData)\n                .join('rect')\n                .attr('width', (d) => xScale(d.bothMean) - leftPadding)\n                .attr('height', yScale.bandwidth())\n                .attr('fill', \"lightgray\")\n                .attr('x', leftPadding + 1)\n                .attr('y', (d) => yScale(d.location))\n                .on('mouseover', (d) => {\n                    let x = d3.event.pageX;\n                    let y = d3.event.pageY; \n                    setTooltip({\n                        ...d,\n                        x,\n                        y  \n                    });\n                }) \n                .on('mouseout', (d) => setTooltip(null))\n    \n            // Add error bars to chart.\n            chartGroup.append('g')\n                .selectAll('line')\n                .data(chartData)\n                .join('line')\n                .attr('x1', (d) => xScale(d.bothLower))\n                .attr('x2', (d) => xScale(d.bothUpper))\n                .attr('y1', (d) => yScale(d.location) + yScale.bandwidth()/2)\n                .attr('y2', (d) => yScale(d.location) + yScale.bandwidth()/2)\n                .attr('stroke', '#667580')\n                .attr('stroke-width', '2px')\n                .attr('stroke-linecap', 'round');\n        }\n       \n        d3.select('#chartGroup').remove();\n       \n        drawBarChart(chartData);\n\n    }, [chartData]);\n\n\n    return (\n        <svg \n            className=\"svgChart\"\n            width={width} \n            height={height}\n            ref={barRef}\n            // This makes the chart *technically* responsive, but there must be \n            // another better, more readable way to manage it.\n            viewBox={`0 0 ${width} ${height}`}\n            preserveAspectRatio=\"xMidYMid meet\"\n        >\n\n            {tooltip && \n                <Tooltip \n                    selected={tooltip}\n                />\n            }\n        </svg>\n    )\n}\n\nexport default BarChart;","import React from 'react';\nimport './Description.css';\n\nconst Description = ({ yearRangeAll }) => {\n\n    return (\n        <div className=\"div-description\">\n            <h3>Chart Information</h3>\n            <h4>Data sources:</h4>\n                <ul className=\"description-title\">\n                    <li>Global Burden of Disease Collaborative Network.</li>\n                    <li>Global Burden of Disease Study 2017 (GBD 2017) Results.</li>\n                    <li>Seattle, United States: Institute for Health Metrics and Evaluation (IHME), 2018.</li>\n                    <li><a href='http://ghdx.healthdata.org/gbd-results-tool'>Available from healthdata.org</a>.</li>\n                    <li><a href='http://ghdx.healthdata.org/gbd-results-tool?params=gbd-api-2017-permalink/c12b65baf872c661f4640bb583320b4e'>Permalink to opioid use disorder data</a>.</li>\n                </ul>\n            <h4>Assumptions:</h4>\n                <ul className=\"description-title\">\n                    <li>Population is defined as inhabitants of a country.</li>\n                    <li>Opioid deaths are shown as number of opioid deaths per 100,000 deaths, cumulative for the period {yearRangeAll[0]} - {yearRangeAll[1]}.</li>\n                    <li>Mean number of deaths for both sexes is plotted along with upper and lower uncertainty boundaries as error bars.</li>\n                    <li>Data specific to males and females is shown when data points are hovered over.</li>\n                </ul>\n        </div>\n    );\n}\n\nexport default Description;\n","import { extent } from 'd3';\n\n// Sort by number of deaths.\nconst sortByTotalDeaths = (a, b) => {\n    if (a.bothMean > b.bothMean) {\n        return -1;\n    } else if (a.bothMean < b.bothMean) {\n        return 1;\n    }\n    return 0;\n}\n\n// Sort by country name.\nconst sortByLocation = (a, b) => {\n    if (a.location > b.location) {\n        return 1;\n    } else if (a.location < b.location) {\n        return -1;\n    }\n    return 0;\n}\n\n// Format raw data for use in charts.\nconst formatChartData = (rawData) => {\n\n    // Get data by country\n    const dataByCountry = rawData.reduce((accum, curr) => {\n        accum[curr.location] \n        ? accum[curr.location] = [...accum[curr.location], curr] \n        : accum[curr.location] = [curr];\n\n        return accum;\n    }, {});\n\n    // Consolidate data by country into new array of country objects\n    // where mean, upper, lower values for all years are combined. \n    // Save years to array to use for display year range in viz.\n    const chartData = Object.values(dataByCountry).map(countryArray => {\n        return countryArray.reduce((accum, curr) => {\n\n        // Get location, etc. as variables for readability.\n        let { location, sex, mean, upper, lower } = curr;\n\n        // Parse strings to floats for arithmetic.\n        let meanFloat = parseFloat(mean);\n        let upperFloat = parseFloat(upper);\n        let lowerFloat = parseFloat(lower);\n        \n        // Set new object for each country, combining data \n        // for all years.\n\n        // On first iteration, set location to '', on \n        // subsequent iterations reset location name.\n        accum.location = location || '';\n        // Combine # of death values for males\n        if (sex === 'Male') {\n            accum.maleMean = (accum.maleMean || 0) + meanFloat;\n            accum.maleUpper = (accum.maleUpper || 0) + upperFloat;\n            accum.maleLower = (accum.maleLower || 0) + lowerFloat;\n        \n        // Combine # of death values for females\n        } else if (sex === 'Female') {\n            accum.femaleMean = (accum.femaleMean || 0) + meanFloat;\n            accum.femaleUpper = (accum.femaleUpper || 0) + upperFloat;\n            accum.femaleLower = (accum.femaleLower || 0) + lowerFloat;\n        \n        // Combine # of death values for both\n        } else if (sex === 'Both') {\n            accum.bothMean = (accum.bothMean || 0) + meanFloat;\n            accum.bothUpper = (accum.bothUpper || 0) + upperFloat;\n            accum.bothLower = (accum.bothLower || 0) + lowerFloat;\n        }\n        // Before you use years, you must dedupe. Use Set to do so.\n        // Below code creates a set (thus deduping), then spreads \n        // that set into a new array.\n        // uniq = [...new Set(array)];\n        accum.years = [...(accum.years || []), curr.year];\n        \n        return accum;\n        }, {})\n    });\n\n    return chartData;\n    \n}\n\nconst getYearRange = (data) => {\n    \n    const years = data.reduce((accum, currVal) => \n        accum = [...accum, ...currVal.years]\n    , []);\n\n    const yearsDeduped = [...new Set(years)];\n\n    return extent(yearsDeduped);\n}\n\nexport { \n    formatChartData, \n    sortByTotalDeaths, \n    sortByLocation, \n    getYearRange \n};\n\n","import React, { useState, useEffect } from 'react';\nimport csvData from './data/GBD_2017_death_rate_opioid_use_disorders_all_ages.csv';\nimport { csv }from 'd3';\nimport Header from './Header';\nimport Nav from './Nav';\nimport BarChart from './BarChart';\nimport Description from './Description';\nimport { formatChartData, sortByTotalDeaths, sortByLocation, getYearRange } from './data/processData';\nimport './App.css';\n\nconst App = () =>  {\n  \n  // Set unsorted data and error in state.\n  const [chartData, setChartData] = useState([]);\n  const [isError, setIsError] = useState(''); \n\n  // Get raw data from csv file and process it.\n  const getData = async (csvFile) => {\n    try {\n        const rawData = await csv(csvFile);\n        const formattedData = formatChartData(rawData);\n        setChartData(formattedData);\n    } catch(error) {\n        setIsError('There was an error processing the csv file.');\n    };\n  }\n\n  // Get data.\n  useEffect( () => {\n    getData(csvData)\n  }, []);\n\n  // Sort data. \n  const sortData = (chartData) => {\n    //sort() sorts array in place, need to get copy first, then sort.\n    const sortedByDeaths = [...chartData].sort(sortByTotalDeaths);\n    const sortedByLocation = [...chartData].sort(sortByLocation);\n    return [sortedByDeaths, sortedByLocation];\n  }\n \n  // Set sorted data and active button in state.\n  const [sortedData, setSortedData] = useState(chartData.sort(sortByTotalDeaths));\n  const [activeButton, setActiveButton] = useState('View by number of deaths');\n\n  const handleButtonChange = (buttonName) => {\n    setActiveButton(buttonName);\n  }\n\n  // Sort data.\n  useEffect( () => {\n    const sorted = sortData(chartData);\n    setSortedData(activeButton === 'View by number of deaths' ? sorted[0] : sorted[1])\n  }, [chartData, setSortedData, activeButton]);\n  \n  // Get year range for all countries. \n  // Individual countries may vary.\n  const yearRangeAll = getYearRange(chartData);\n\n\n  return (\n    <div className=\"App\">\n\n        <Header />\n\n        {!isError ? '' : <div className = \"error\">{isError}</div>}\n\n        <Nav \n          activeButton={activeButton}\n          onButtonChange={handleButtonChange}\n        />\n\n        <main className=\"main-content\">\n          <BarChart \n            chartData={sortedData}\n          />\n        </main>\n\n        <Description \n          yearRangeAll={yearRangeAll}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />, \n    document.querySelector('#root')\n);\n\n\n"],"sourceRoot":""}